AWSTemplateFormatVersion: '2010-09-09'
Description: ECS cluster, services, ALB, and ECR for 2-tier app

# Parameters to import network stack outputs
Parameters:
  VpcId:
    Type: String
    Description: VPC ID from network stack
  PublicSubnet1Id:
    Type: String
    Description: First public subnet ID
  PublicSubnet2Id:
    Type: String
    Description: Second public subnet ID
  PrivateSubnet1Id:
    Type: String
    Description: First private subnet ID
  PrivateSubnet2Id:
    Type: String
    Description: Second private subnet ID

Resources:
  # ECR Repository: Stores frontend and backend images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: my-app-repo # Single repo
      ImageScanningConfiguration:
        ScanOnPush: true # Enable vulnerability scanning

  # ECS Cluster: Manages services and tasks
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: my-ecs-cluster

  # IAM Role: For ECS tasks to access ECR and CloudWatch
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # IAM Role: For ECS services to interact with AWS
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  # Security Group: ALB accepts HTTP traffic
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId # Use imported VPC ID
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow internet access

  # Security Group: ECS tasks accept traffic from ALB
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for ECS tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup # Backend
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup # Frontend

  # ALB: Routes traffic to services
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1Id # Use imported subnet IDs
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup # Default to frontend

  # Target Group: For frontend tasks
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      TargetType: ip # Fargate requirement
      HealthCheckPath: / # Verify frontend health
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /api # Verify backend health

  # Listener Rule: Route /api* to backend
  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: ['/api*']
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # Task Definition: Frontend container
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: frontend-task
      NetworkMode: awsvpc # Fargate networking
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256' # Small CPU
      Memory: '512' # Small memory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-app-repo:frontend-latest'
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/frontend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend

  # Task Definition: Backend container
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: backend-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-app-repo:backend-latest'
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/backend
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend

  # ECS Service: Runs frontend tasks
  FrontendService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: frontend-service
      TaskDefinition: !Ref FrontendTaskDefinition
      DesiredCount: 1 # One task
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1Id # Use private subnets
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup

  # ECS Service: Runs backend tasks
  BackendService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: backend-service
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 3000
          TargetGroupArn: !Ref BackendTargetGroup

  # CloudWatch Log Group: Frontend logs
  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/frontend
      RetentionInDays: 7 # Keep for a week

  # CloudWatch Log Group: Backend logs
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/backend
      RetentionInDays: 7

# Outputs: For accessing the application
Outputs:
  ALBDNSName:
    Description: DNS name of the ALB
    Value: !GetAtt ALB.DNSName
  ECRRepositoryURI:
    Description: URI of the ECR repository
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-app-repo'